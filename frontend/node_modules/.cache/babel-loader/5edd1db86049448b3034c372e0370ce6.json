{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/davidgonzalez/Downloads/ReadyCar/frontend/src/User/components/ResetForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, Fragment } from 'react';\nimport { AiOutlineCheckCircle } from 'react-icons/ai';\nimport { useParams, useHistory } from 'react-router-dom';\nimport gsap from 'gsap';\nimport axios from '../../axios';\nimport PasswordField from './PasswordField';\nimport { ValidateInput } from '../../shared/utils/validations';\nimport Layout from '../../shared/components/Layout/Layout';\nimport AuthButton from '../../shared/components/Buttons/AuthButton';\n\nconst ResetForm = () => {\n  _s();\n\n  const token = useParams().token;\n  let authForm = useRef(null);\n  const history = useHistory();\n  const [isLoading, setIsLoadin] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [reset, setReset] = useState({\n    password: '',\n    password2: '',\n    token: token\n  }); //Gsap entry animation\n\n  useEffect(() => {\n    let tl = gsap.timeline();\n    tl.from(authForm, 1.5, {\n      scale: 0.5,\n      opacity: 0\n    });\n  }, []);\n  const {\n    password,\n    password2\n  } = reset; //onChange + input validation\n\n  const onHandleChange = e => {\n    e.preventDefault();\n    const {\n      name,\n      value\n    } = e.target;\n    let error = ValidateInput(name, value);\n    setErrors(error);\n    setReset({ ...reset,\n      [name]: value\n    });\n  }; //Check password and password2 - post new password and token to db\n\n\n  const onHandleSubmit = e => {\n    e.preventDefault();\n\n    if (password !== password2) {\n      setErrors({\n        msg: 'Password and confirm password does not match'\n      });\n    } else {\n      setIsLoadin(true);\n      axios.post('/users/update', reset, {\n        'Content-Type': 'application/json'\n      }).then(res => {\n        setIsLoadin(false);\n        history.push('/auth');\n      }).catch(err => {\n        setIsLoadin(false);\n        console.log(err);\n      });\n      setReset({\n        password: '',\n        password2: ''\n      });\n    }\n\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-container\",\n      ref: el => authForm = el,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Reset Passowrd Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter your new password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"auth-form\",\n        onSubmit: onHandleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-fied\",\n          children: /*#__PURE__*/_jsxDEV(PasswordField, {\n            onHandleChange: onHandleChange,\n            value: password,\n            errors: errors.password,\n            passLength: password.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-fied\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            name: \"password2\",\n            placeholder: \"Confirm password...\",\n            value: password2,\n            onChange: onHandleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this), errors.password2 && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"errors\",\n            children: errors.password2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 46\n          }, this), password2.length >= 6 && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"checked\",\n            children: /*#__PURE__*/_jsxDEV(AiOutlineCheckCircle, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 75\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 52\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-fied\",\n          children: isLoading ? /*#__PURE__*/_jsxDEV(AuthButton, {\n            value: \"Update Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 31\n          }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"submit\",\n              value: \"Update Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 33\n            }, this), errors.msg && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"errors\",\n              children: errors.msg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 48\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ResetForm, \"Zi4D8QyLeESiJ93JCd05KAdjOjI=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = ResetForm;\nexport default ResetForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetForm\");","map":{"version":3,"sources":["/Users/davidgonzalez/Downloads/ReadyCar/frontend/src/User/components/ResetForm.jsx"],"names":["React","useState","useRef","useEffect","Fragment","AiOutlineCheckCircle","useParams","useHistory","gsap","axios","PasswordField","ValidateInput","Layout","AuthButton","ResetForm","token","authForm","history","isLoading","setIsLoadin","errors","setErrors","reset","setReset","password","password2","tl","timeline","from","scale","opacity","onHandleChange","e","preventDefault","name","value","target","error","onHandleSubmit","msg","post","then","res","push","catch","err","console","log","el","length"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, Fragment } from 'react';\nimport { AiOutlineCheckCircle } from 'react-icons/ai';\nimport { useParams, useHistory } from 'react-router-dom';\nimport gsap from 'gsap';\nimport axios from '../../axios';\n\nimport PasswordField from './PasswordField';\nimport { ValidateInput } from '../../shared/utils/validations';\nimport Layout from '../../shared/components/Layout/Layout';\nimport AuthButton from '../../shared/components/Buttons/AuthButton';\n\nconst ResetForm = () => {\n\n    const token = useParams().token;\n    let authForm = useRef(null);\n    const history = useHistory(); \n    const [ isLoading, setIsLoadin ] = useState(false);\n    const [ errors, setErrors ] = useState({});\n    const [reset, setReset ] = useState({\n        password: '',\n        password2: '',\n        token: token\n    });\n\n    //Gsap entry animation\n    useEffect(() => {\n        let tl = gsap.timeline();\n        tl.from(authForm, 1.5, {scale: 0.5, opacity: 0})\n    }, [])\n\n    const { password, password2 } = reset;\n\n    //onChange + input validation\n    const onHandleChange = (e) => {\n        e.preventDefault();\n        const { name, value } = e.target;\n        let error = ValidateInput(name, value);\n        setErrors(error)\n        setReset({...reset, [name]: value});\n    };\n\n    //Check password and password2 - post new password and token to db\n    const onHandleSubmit = (e) => {\n        e.preventDefault();\n        if(password !== password2){\n            setErrors({msg:'Password and confirm password does not match'})\n        }else{   \n            setIsLoadin(true);\n            axios.post('/users/update', reset,\n            {'Content-Type': 'application/json'})\n                .then(res => {\n                 setIsLoadin(false);\n                 history.push('/auth')\n                }).catch(err => {\n                 setIsLoadin(false);\n                 console.log(err);\n                });\n            setReset({\n                password: '',\n                password2: ''\n            });\n        };\n    };\n\n    return(\n        <Layout>\n            <div className='auth-container' ref={el => ( authForm = el)}>\n                <h3>Reset Passowrd Form</h3>\n                <p>Enter your new password</p>\n                <form className='auth-form' onSubmit={onHandleSubmit}>\n                    <div className='input-fied'>\n                        <PasswordField onHandleChange={onHandleChange}\n                                        value={password}\n                                        errors={errors.password}\n                                        passLength={password.length}/>\n                    </div>\n                    <div className='input-fied'>\n                        <input type=\"password\" name='password2' placeholder='Confirm password...'\n                        value={password2} onChange={onHandleChange} required/>\n                        {errors.password2 && <p className='errors'>{errors.password2}</p>}\n                        { password2.length >= 6 && <p className='checked'><AiOutlineCheckCircle /></p>}\n                    </div>\n                    <div className='input-fied'>\n                        {\n                            isLoading \n                            ? <AuthButton value='Update Password'/>\n                            :\n                            <Fragment>\n                                <input type=\"submit\" value='Update Password'/>\n                                {errors.msg && <p className='errors'>{errors.msg}</p>}\n                            </Fragment>\n                        }          \n                    </div>\n                </form>\n            </div>\n        </Layout>\n    )\n}\n\nexport default ResetForm;"]},"metadata":{},"sourceType":"module"}