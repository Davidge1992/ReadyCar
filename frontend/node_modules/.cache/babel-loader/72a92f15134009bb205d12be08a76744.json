{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/davidgonzalez/Documents/GitHub/ReadyCar/frontend/src/shared/contexts/AuthContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useCallback, useEffect } from 'react'; //Authentication context \n\nexport const AuthContext = /*#__PURE__*/createContext({\n  isLoggedIn: false,\n  userId: null,\n  token: null,\n  name: null\n});\nlet logoutTimer;\n\nconst AuthContextProvider = props => {\n  _s();\n\n  const [token, setToken] = useState(false);\n  const [userId, setUserId] = useState(false);\n  const [name, setName] = useState(false);\n  const [expirTime, setExpTimer] = useState();\n  const login = useCallback((uid, token, name, expirInTime) => {\n    setToken(token);\n    setUserId(uid);\n    setName(name);\n    const tokenExpirationTime = expirInTime || new Date(new Date().getTime() + 1000 * 60 * 60);\n    setExpTimer(tokenExpirationTime);\n    localStorage.setItem('userData', JSON.stringify({\n      userId: uid,\n      token: token,\n      name: name,\n      expiration: tokenExpirationTime.toISOString()\n    }));\n  }, []);\n  const logout = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    setName(null);\n    setExpTimer(null);\n    localStorage.removeItem('userData');\n  }, []);\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem('userData'));\n\n    if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\n      login(storedData.userId, storedData.token, storedData.name, new Date(storedData.expiration));\n    }\n  }, [login]);\n  useEffect(() => {\n    if (token && expirTime) {\n      const remainingTime = expirTime.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, expirTime]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: !!token,\n      token: token,\n      userId: userId,\n      name: name,\n      login,\n      logout\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthContextProvider, \"F8PeqCFY/DfgSwFenEtmfgDl/ew=\");\n\n_c = AuthContextProvider;\nexport default AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/davidgonzalez/Documents/GitHub/ReadyCar/frontend/src/shared/contexts/AuthContext.jsx"],"names":["React","createContext","useState","useCallback","useEffect","AuthContext","isLoggedIn","userId","token","name","logoutTimer","AuthContextProvider","props","setToken","setUserId","setName","expirTime","setExpTimer","login","uid","expirInTime","tokenExpirationTime","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","logout","removeItem","storedData","parse","getItem","remainingTime","setTimeout","clearTimeout","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useCallback, useEffect } from 'react';\n\n//Authentication context \nexport const AuthContext = createContext({\n    isLoggedIn: false,\n    userId: null,\n    token: null,\n    name: null,\n});\n\nlet logoutTimer;\n\nconst AuthContextProvider = (props) => {\n\n    const [token, setToken] = useState(false);\n    const [userId, setUserId] = useState(false);\n    const [name, setName] = useState(false)\n    const [expirTime, setExpTimer] = useState();\n\n    const login = useCallback((uid, token, name, expirInTime ) => {\n        setToken(token);\n        setUserId(uid);\n        setName(name)\n        const tokenExpirationTime =\n        expirInTime || new Date(new Date().getTime() + 1000 * 60 * 60);\n          setExpTimer(tokenExpirationTime);\n    \n        localStorage.setItem\n        ('userData', \n        JSON.stringify(\n          {userId: uid,\n           token: token,\n           name: name, \n           expiration: tokenExpirationTime.toISOString() }));\n      }, []);\n\n      const logout = useCallback(() => {\n        setToken(null);\n        setUserId(null);\n        setName(null);\n        setExpTimer(null);\n        localStorage.removeItem('userData');\n      }, []);\n\n      useEffect(() => {\n        const storedData = JSON.parse(localStorage.getItem('userData'));\n        if (storedData && storedData.token && new Date(storedData.expiration) > new Date() ) {\n          login(storedData.userId, storedData.token, storedData.name, new Date(storedData.expiration));\n        }\n      }, [login]);\n    \n      useEffect(() => {\n        if(token && expirTime){\n          const remainingTime = expirTime.getTime() - new Date().getTime();\n          logoutTimer = setTimeout(logout, remainingTime);\n        }else {\n          clearTimeout(logoutTimer);\n        }\n      }, [token, logout, expirTime]);\n\n    return(\n        <AuthContext.Provider value={{\n            isLoggedIn: !!token,\n            token: token,\n            userId: userId,\n            name: name,\n            login,\n            logout\n        }}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthContextProvider;"]},"metadata":{},"sourceType":"module"}