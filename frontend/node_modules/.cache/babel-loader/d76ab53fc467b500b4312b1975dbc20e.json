{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/davidgonzalez/Downloads/ReadyCar/frontend/src/User/components/Login.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, Fragment } from 'react';\nimport { AiOutlineCheckCircle } from 'react-icons/ai';\nimport { NavLink } from 'react-router-dom';\nimport gsap from 'gsap';\nimport { ValidateEmail, ValidateInput } from '../../shared/utils/validations';\nimport AuthButton from '../../shared/components/Buttons/AuthButton';\nimport PasswordField from './PasswordField';\n\nconst Login = props => {\n  _s();\n\n  let authForm = useRef(null);\n  let tl = useRef();\n  const [errors, setErrors] = useState({});\n  const [loginUser, setLoginUser] = useState({\n    email: '',\n    password: ''\n  });\n  const {\n    email,\n    password\n  } = loginUser; //on input change + input validation\n\n  const onHandleChange = e => {\n    e.preventDefault();\n    const {\n      name,\n      value\n    } = e.target;\n    let error = ValidateInput(name, value);\n    setErrors(error);\n    setLoginUser({ ...loginUser,\n      [name]: value\n    });\n  }; //Submit changes\n\n\n  const onHandleSubmit = e => {\n    e.preventDefault();\n    props.onLoginHandler(loginUser);\n    setLoginUser({\n      email: '',\n      password: ''\n    });\n  }; //Gsap entry animation\n\n\n  useEffect(() => {\n    tl.current = gsap.timeline();\n    tl.current.fromTo(authForm, 1.5, {\n      scale: 0.5,\n      opacity: 0\n    }, {\n      scale: 1,\n      opacity: 1\n    });\n  }, [tl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-container\",\n    ref: el => authForm = el,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Log-in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"enter your credentials to log-in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"auth-form\",\n      onSubmit: onHandleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-fied\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          placeholder: \"E-mail...\",\n          value: email,\n          onChange: onHandleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), errors.email && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"errors\",\n          children: errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 38\n        }, this), ValidateEmail.test(email) && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"checked\",\n          children: /*#__PURE__*/_jsxDEV(AiOutlineCheckCircle, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 74\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 51\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-fied\",\n        children: /*#__PURE__*/_jsxDEV(PasswordField, {\n          onHandleChange: onHandleChange,\n          value: password,\n          errors: errors.password,\n          passLength: password.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-fied\",\n        children: props.isLoading ? /*#__PURE__*/_jsxDEV(AuthButton, {\n          value: \"Log-in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Log-in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this), errors.msg && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"errors\",\n            children: errors.msg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 44\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"psw-question\",\n      children: /*#__PURE__*/_jsxDEV(NavLink, {\n        to: \"/auth/reset\",\n        children: \"Forgotten password?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 41\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"D2tvUG6N1Ue2K9GmekS7QC4wsgY=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/davidgonzalez/Downloads/ReadyCar/frontend/src/User/components/Login.jsx"],"names":["React","useState","useRef","useEffect","Fragment","AiOutlineCheckCircle","NavLink","gsap","ValidateEmail","ValidateInput","AuthButton","PasswordField","Login","props","authForm","tl","errors","setErrors","loginUser","setLoginUser","email","password","onHandleChange","e","preventDefault","name","value","target","error","onHandleSubmit","onLoginHandler","current","timeline","fromTo","scale","opacity","el","test","length","isLoading","msg"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, Fragment } from 'react'\nimport { AiOutlineCheckCircle } from 'react-icons/ai'\nimport { NavLink } from 'react-router-dom';\nimport gsap from 'gsap'\n\nimport { ValidateEmail, ValidateInput } from '../../shared/utils/validations'\nimport AuthButton from '../../shared/components/Buttons/AuthButton';\nimport PasswordField from './PasswordField';\n\nconst Login = (props) => {\n\n    let authForm = useRef(null); \n    let tl = useRef()\n    const [ errors, setErrors ] = useState({});\n    const [ loginUser, setLoginUser ] = useState({\n        email: '',\n        password: ''\n     });\n\n    const { email, password } = loginUser;\n\n    //on input change + input validation\n    const onHandleChange = (e) => {\n        e.preventDefault();\n        const { name, value } = e.target;\n        let error = ValidateInput(name, value);\n        setErrors(error)\n        setLoginUser({...loginUser, [name]: value})\n    };\n\n    //Submit changes\n    const onHandleSubmit = (e) => {\n        e.preventDefault();\n        props.onLoginHandler(loginUser);       \n        setLoginUser({\n            email: '',\n            password: ''\n        });\n    };\n\n    //Gsap entry animation\n    useEffect(() => {\n        tl.current = gsap.timeline();\n        tl.current.fromTo(authForm, 1.5, {scale: 0.5, opacity: 0}, {scale: 1, opacity: 1})\n    }, [tl])\n\n    return (\n        <div className='auth-container' ref={el => ( authForm = el)}>\n            <h3>Log-in</h3>\n            <p>enter your credentials to log-in</p>\n            <form className='auth-form' onSubmit={onHandleSubmit}>\n                <div className='input-fied'>\n                    <input type=\"email\" name='email' placeholder='E-mail...'\n                    value={email} onChange={onHandleChange} required/>        \n                    {errors.email && <p className='errors'>{errors.email}</p>}\n                    {ValidateEmail.test(email) && <p className='checked'><AiOutlineCheckCircle /></p>}\n                </div>\n                 <div className='input-fied'>\n                    <PasswordField onHandleChange={onHandleChange}\n                                    value={password}\n                                    errors={errors.password}\n                                    passLength={password.length}/>\n                </div>\n                <div className='input-fied'>\n                    {\n                        props.isLoading \n                        ? <AuthButton value='Log-in'/>\n                        :\n                        <Fragment>\n                            <input type=\"submit\" value='Log-in'/>\n                            {errors.msg && <p className='errors'>{errors.msg}</p>}\n                        </Fragment>\n                    }                  \n                </div>             \n            </form>\n            <p className='psw-question'><NavLink to='/auth/reset'>Forgotten password?</NavLink></p>\n        </div>\n    )\n\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}